import os
import pandas as pd
import xlrd 
import datetime

def getNearElement(coord, position):
    """
    A partir dunha posición de excel devolve o elemento cercano indicado
    u up
    d down
    r right
    l left
    """
    row = coord[0]
    col = coord[1]
    if position == 'u':
        row = max(0, row - 1)
    elif position == 'd':
        row = row + 1
    elif position == 'r':
        col = col + 1
    elif position == 'l':
        col = max(0, col - 1)
    
    return [row, col]

def getIndex(sheet, targs, start = 0, end = 20, position = None):
    """
    A partir dunha folla de excel, unha area de busqueda e os campos a buscar
    devolve un diccionario cas posicions dos campos
    
    Devolve a celda da dereita se así o indicamos
    """
    index = {}
    targets = targs.copy()
    for col in range(start, end):
        for row in range(start, end):
            for tar in targets:
                if sheet.cell(row, col).value == tar:
                    if position != None:
                        index[tar] = getNearElement([row,col], position)
                    else:
                        index[tar] = [row, col]
                    
                    targets.remove(tar)
    
    return index

def getCellValue(sheet, ind, value_proc=None, text_proc=None):
    """Converts the given cell to appropriate text."""
    """The proc will come in only when the given is value or text."""
    
    cell = sheet.cell(ind[0], ind[1])
    book = sheet.book
    
    
    ttype = cell.ctype
    if ttype == xlrd.XL_CELL_EMPTY or ttype == xlrd.XL_CELL_TEXT or ttype == xlrd.XL_CELL_BLANK:
        if text_proc is None:
            return cell.value
        else:
            return text_proc(cell.value)
    if ttype == xlrd.XL_CELL_NUMBER or ttype == xlrd.XL_CELL_BOOLEAN:
        if value_proc is None:
            return str(cell.value)
        else:
            return str(value_proc(cell.value))
    if ttype == xlrd.XL_CELL_DATE:
        try:
            return datetime.datetime(*xlrd.xldate_as_tuple(cell.value, book.datemode))
        except:
            return None
    if cell.ctype == xlrd.XL_CELL_ERROR:
        # Apply no proc on this.
        return xlrd.error_text_from_code[cell.value]
    
# Set path
mypath = "g:\\Jealsa\\P-JEA-022018 - Machine Learning\\Escurrido"
os.chdir(mypath)

# Diccionario cas follas de interese do ficheiro excel
sheets = {0: "ORGANOLÉPTICO ATÚN",
          1: "EVALUACIÓN",
          2: "HC.C.17.15 CONTROL DESTRUCTIVO",
          3: "HC.C.17.15 CONTROL DESTRUCT MAD"
          }

# Campos a obter para cada sheet
campos0 = ['Nº Lote:',	'Cdgo PB:',	'Descripción:',	'Nº Unidades lote:',	
           'F. Fabricación:',	'F. Análisis:', 'F. Liberación:']
campos1 = ['ASPECTO A LA APERTURA',	'Compacidad',	'Conformación y geometría',	
           'Superficie',	'Color',	'Líquido de cobertura',	'Olor',	'TEXTURA',	
           'SABOR',	'SAL',	'LIMPIEZA',	'GLOBAL']
campos2 = ['n',	'Peso neto',	'X0',	'Xi',	'Control med', 'Error máx']
campos3 = ['Xt']

campos0_ant = ['Nº Lote:  ', 'PB/Producto:', 'Nº Unidades lote:',
               'F. Fabricación:',	'F. Análisis:', 'F. Liberación:']

# dataframe vacios para rellenar
df_lote = pd.DataFrame(columns = campos0 + campos1 + ["Filepath"])
df_control = pd.DataFrame(columns = ["Nº Lote:", "Cdgo PB:"] + campos2 + campos3)
m = 0
n = 0

# comezamos a iterar
#mypath = "g:\\Jealsa\\P-JEA-022018 - Machine Learning\\Escurrido\\Escurrido_2018\\prueba3"
anteriores = []
# Iteramos sobre todos los elementos de la carpeta raiz
for path, subdirs, files in os.walk(mypath):
    for name in files:
        # filtramos, primero por ficheros xlsm
        if name.endswith('.xlsm'):
            # filtramos por nombre de fichero para coger solo los que nos interesan
            if ('-' not in name and 'contra' not in name 
                and 'peso' not in name.lower() and 'limpieza' not in name
                and 'Copia' not in name and "CONTRA" not in name
                and "HC.C" not in name and "estudio" not in name.lower()
                and 'predictivo' not in name and 'CONTROL' not in name
                and "MUESTRA" not in path and "COMPETENCIA" not in path
                and "ESTUDIO" not in path and "mod" not in name
                and 'PLANCHA' not in name
                and name not in anteriores):
                antFlag = False
                # registramos ficheros anteriores para no repetir
                if "ANTERIOR" in name: 
                    anteriores.append(name.replace(' ANTERIOR', ''))
                    antFlag = True
                # Open a workbook  (PENDIENTE IMPLEMENTAR SOLO VALORES)
                wb = xlrd.open_workbook(os.path.join(path, name))

                # cargamos sheets para df_lote
                sheet0 = wb.sheet_by_name(sheets[0])
                sheet1 = wb.sheet_by_name(sheets[1])
                sheet2 = wb.sheet_by_name(sheets[2])
                existssheet3 = False
                if sheets[3] in wb.sheet_names():
                    sheet3 = wb.sheet_by_name(sheets[3])
                    existssheet3 = True
                
                # Calculamos os indices dos campos de interese para cada sheet
                if antFlag:
                    index0 = getIndex(sheet0, campos0_ant, position = 'r')
                    for key in ['Nº Lote:  ', 'PB/Producto:','F. Análisis:']:
                        index0[key] = getNearElement(index0[key], 'r')
                else:
                    index0 = getIndex(sheet0, campos0, position = 'r')
                index1 = getIndex(sheet1, campos1, position = 'r')
                index2 = getIndex(sheet2, campos2, position = 'd')
                if existssheet3: index3 = getIndex(sheet3, campos3, position = 'd')
                
                # Correximos os indices 1 (alguns teñen un espacio)
                for key in index1.keys():
                    if key == key.upper():
                        index1[key] = getNearElement(index1[key], 'r')
                
                # Calculamos a lonxitude da matrix Control
                count = 0
                ind = index2['Peso neto']
                valor = 0
                while valor != '':
                    valor = getCellValue(sheet2, ind)
                    ind = getNearElement(ind, 'd')
                    count += 1
                    if count == 81: break
                
                # Calculamos a nova fila de datos para o df lote e os engadimos
                row_lote = []
                if antFlag:
                    for j in campos0_ant:
                        if j in index0:
                            val = getCellValue(sheet0, index0[j])
                            if 'PB' in j:
                                row_lote.append(val.split(None, 1)[0])
                                row_lote.append(val.split(None, 1)[1])
                            else:
                                row_lote.append(val)
                        else:
                            row_lote.append(None)
                else:
                    for j in campos0:
                        if j in index0:
                            row_lote.append(getCellValue(sheet0, index0[j]))
                        else:
                            row_lote.append(None)
                for j in campos1:
                    row_lote.append(getCellValue(sheet1, index1[j]))
                # engadimos o path
                row_lote.append(os.path.join(path, name))
                
                df_lote.loc[n] = row_lote  
                n += 1
                
                # Calculamos as novas filas para o df control e as vamos engadindo
                lote = row_lote[0]
                PB = row_lote[1]
                
                for row in range(count-1):
                    row_control = []
                    row_control.append(lote)
                    row_control.append(PB)
                    for j in campos2:
                        row_control.append(getCellValue(sheet2, index2[j]))
                        index2[j] = getNearElement(index2[j], 'd')
                    
                    for j in campos3:
                        if existssheet3:
                            row_control.append(getCellValue(sheet3, index3[j]))
                            index3[j] = getNearElement(index3[j], 'd')
                        else:
                            row_control.append(None)
                        
                    
                    df_control.loc[m] = row_control
                    m += 1

# Renomeamos as columnas
df_lote.columns = ['lote', 'pb', 'descripcion', 'unidades_lote',
                    'data_fabricacion', 'data_analisis', 'data_liberacion', 
                    'aspecto_apertura', 'compacidade', 'conformacion_xeometria',
                    'superficie', 'cor', 'liquido_cobertura', 'olor',
                    'textura', 'sabor', 'sal', 'limpeza', 'global',                  
                    'filepath']

df_control. columns = ['lote', 'pb', 'n', 'peso_neto', 'X0', 'Xi', 'control_med',
                       'error_max', 'Xt']

# Pasamos os dataframe a csv's
df_lote.to_csv("Escurrido_lote.csv", index = False)
df_control.to_csv("Escurrido_control.csv", index = False)
